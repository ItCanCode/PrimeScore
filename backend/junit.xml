<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="49" failures="1" errors="0" time="2.756">
  <testsuite name="googleAuth controller" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="1.785" tests="7">
    <testcase classname="googleAuth controller should return 400 if idToken or action is missing" name="googleAuth controller should return 400 if idToken or action is missing" time="0.012">
    </testcase>
    <testcase classname="googleAuth controller should return 400 for invalid action" name="googleAuth controller should return 400 for invalid action" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller signup: should return 409 if user already exists" name="googleAuth controller signup: should return 409 if user already exists" time="0.002">
    </testcase>
    <testcase classname="googleAuth controller signup: should create new user and return 201" name="googleAuth controller signup: should create new user and return 201" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller login: should return 404 if user not found" name="googleAuth controller login: should return 404 if user not found" time="0.002">
    </testcase>
    <testcase classname="googleAuth controller login: should return 200 with user data if user exists" name="googleAuth controller login: should return 200 with user data if user exists" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller should return 401 on token verification error" name="googleAuth controller should return 401 on token verification error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LiveSport controller" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="1.818" tests="2">
    <testcase classname="LiveSport controller adds matches successfully" name="LiveSport controller adds matches successfully" time="0.011">
    </testcase>
    <testcase classname="LiveSport controller returns 400 if no matches" name="LiveSport controller returns 400 if no matches" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Manager Controller" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="1.832" tests="9">
    <testcase classname="Manager Controller createTeam should create a team successfully" name="Manager Controller createTeam should create a team successfully" time="0.011">
    </testcase>
    <testcase classname="Manager Controller createTeam should handle errors when creating a team" name="Manager Controller createTeam should handle errors when creating a team" time="0.001">
    </testcase>
    <testcase classname="Manager Controller addPlayers should add players successfully" name="Manager Controller addPlayers should add players successfully" time="0.002">
    </testcase>
    <testcase classname="Manager Controller addPlayers should return error if team not found" name="Manager Controller addPlayers should return error if team not found" time="0">
    </testcase>
    <testcase classname="Manager Controller addPlayers should return error if user is not team owner" name="Manager Controller addPlayers should return error if user is not team owner" time="0.001">
    </testcase>
    <testcase classname="Manager Controller addPlayers should handle errors when adding players" name="Manager Controller addPlayers should handle errors when adding players" time="0.007">
    </testcase>
    <testcase classname="Manager Controller myTeam should return team if exists" name="Manager Controller myTeam should return team if exists" time="0.001">
    </testcase>
    <testcase classname="Manager Controller myTeam should return hasTeam: false if no team exists" name="Manager Controller myTeam should return hasTeam: false if no team exists" time="0">
    </testcase>
    <testcase classname="Manager Controller myTeam should handle errors when fetching team" name="Manager Controller myTeam should handle errors when fetching team" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="verifyGoogleToken service" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:57:00" time="1.825" tests="2">
    <testcase classname="verifyGoogleToken service should return decoded token when verification succeeds" name="verifyGoogleToken service should return decoded token when verification succeeds" time="0.013">
    </testcase>
    <testcase classname="verifyGoogleToken service should throw an error when verification fails" name="verifyGoogleToken service should throw an error when verification fails" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="adminController" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="1.875" tests="11">
    <testcase classname="adminController createMatch: should create a match successfully" name="adminController createMatch: should create a match successfully" time="0.014">
    </testcase>
    <testcase classname="adminController createMatch: should return 500 on Firestore error" name="adminController createMatch: should return 500 on Firestore error" time="0.004">
    </testcase>
    <testcase classname="adminController updateMatchStatus: should update match status if match exists" name="adminController updateMatchStatus: should update match status if match exists" time="0.003">
    </testcase>
    <testcase classname="adminController updateMatchStatus: should return 404 if match does not exist" name="adminController updateMatchStatus: should return 404 if match does not exist" time="0.002">
    </testcase>
    <testcase classname="adminController updateScore: should update score in matches and ongoingMatches" name="adminController updateScore: should update score in matches and ongoingMatches" time="0.002">
    </testcase>
    <testcase classname="adminController updateScore: should add event if eventType is Goal" name="adminController updateScore: should add event if eventType is Goal" time="0.007">
    </testcase>
    <testcase classname="adminController addMatchEvent: should add a match event successfully" name="adminController addMatchEvent: should add a match event successfully" time="0.002">
    </testcase>
    <testcase classname="adminController adminController - allTeams should return all teams when no sportType filter is applied" name="adminController adminController - allTeams should return all teams when no sportType filter is applied" time="0.002">
    </testcase>
    <testcase classname="adminController adminController - allTeams should return filtered teams when sportType is provided" name="adminController adminController - allTeams should return filtered teams when sportType is provided" time="0.003">
    </testcase>
    <testcase classname="adminController adminController - allTeams should return empty array if no teams exist" name="adminController adminController - allTeams should return empty array if no teams exist" time="0.009">
    </testcase>
    <testcase classname="adminController adminController - allTeams should handle Firestore errors" name="adminController adminController - allTeams should handle Firestore errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Display Controller" errors="0" failures="1" skipped="0" timestamp="2025-09-25T20:57:00" time="1.924" tests="6">
    <testcase classname="Display Controller getMatchEventsById should return match events when found" name="Display Controller getMatchEventsById should return match events when found" time="0.02">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: &quot;match_events&quot;
Received: &quot;matchEvents&quot;

Number of calls: 1
    at Object.toHaveBeenCalledWith (C:\Users\lebop\Desktop\Coding Projects\PrimeScore React App\PrimeScore\backend\tests\display.test.js:56:32)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)</failure>
    </testcase>
    <testcase classname="Display Controller getMatchEventsById should return 404 when match events not found" name="Display Controller getMatchEventsById should return 404 when match events not found" time="0.002">
    </testcase>
    <testcase classname="Display Controller getMatchEventsById should handle errors" name="Display Controller getMatchEventsById should handle errors" time="0.016">
    </testcase>
    <testcase classname="Display Controller getmatchEvents should return only ongoing matches with events" name="Display Controller getmatchEvents should return only ongoing matches with events" time="0.004">
    </testcase>
    <testcase classname="Display Controller getmatchEvents should return empty array if no ongoing matches" name="Display Controller getmatchEvents should return empty array if no ongoing matches" time="0.001">
    </testcase>
    <testcase classname="Display Controller getmatchEvents should handle errors" name="Display Controller getmatchEvents should handle errors" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="feedController" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="2.08" tests="6">
    <testcase classname="feedController startMatch should start a match successfully" name="feedController startMatch should start a match successfully" time="0.006">
    </testcase>
    <testcase classname="feedController startMatch should handle Firestore errors" name="feedController startMatch should handle Firestore errors" time="0.011">
    </testcase>
    <testcase classname="feedController addEvent should require eventType, team, and time" name="feedController addEvent should require eventType, team, and time" time="0.001">
    </testcase>
    <testcase classname="feedController addEvent should return 404 if match not found" name="feedController addEvent should return 404 if match not found" time="0">
    </testcase>
    <testcase classname="feedController addEvent should add an event and update score for home team" name="feedController addEvent should add an event and update score for home team" time="0.002">
    </testcase>
    <testcase classname="feedController addEvent should handle Firestore errors" name="feedController addEvent should handle Firestore errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="UserController" errors="0" failures="0" skipped="0" timestamp="2025-09-25T20:56:59" time="2.143" tests="6">
    <testcase classname="UserController getMatches should fetch matches and return 200" name="UserController getMatches should fetch matches and return 200" time="0.007">
    </testcase>
    <testcase classname="UserController getCurrentUser should fetch current user data" name="UserController getCurrentUser should fetch current user data" time="0.002">
    </testcase>
    <testcase classname="UserController getCurrentUser should return 401 if no token" name="UserController getCurrentUser should return 401 if no token" time="0.001">
    </testcase>
    <testcase classname="UserController updateUser should update user profile successfully" name="UserController updateUser should update user profile successfully" time="0.002">
    </testcase>
    <testcase classname="UserController updateUser should update profile with partial data" name="UserController updateUser should update profile with partial data" time="0.002">
    </testcase>
    <testcase classname="UserController updateUser should return 500 on error" name="UserController updateUser should return 500 on error" time="0.007">
    </testcase>
  </testsuite>
</testsuites>