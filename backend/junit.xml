<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="48" failures="0" errors="0" time="1.861">
  <testsuite name="LiveSport controller" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.354" tests="2">
    <testcase classname="LiveSport controller adds matches successfully" name="LiveSport controller adds matches successfully" time="0.008">
    </testcase>
    <testcase classname="LiveSport controller returns 400 if no matches" name="LiveSport controller returns 400 if no matches" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="adminController" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.375" tests="7">
    <testcase classname="adminController createMatch: should create a match successfully" name="adminController createMatch: should create a match successfully" time="0.007">
    </testcase>
    <testcase classname="adminController createMatch: should return 500 on Firestore error" name="adminController createMatch: should return 500 on Firestore error" time="0.001">
    </testcase>
    <testcase classname="adminController updateMatchStatus: should update match status if match exists" name="adminController updateMatchStatus: should update match status if match exists" time="0.001">
    </testcase>
    <testcase classname="adminController updateMatchStatus: should return 404 if match does not exist" name="adminController updateMatchStatus: should return 404 if match does not exist" time="0.001">
    </testcase>
    <testcase classname="adminController updateScore: should update score in matches and ongoingMatches" name="adminController updateScore: should update score in matches and ongoingMatches" time="0.001">
    </testcase>
    <testcase classname="adminController updateScore: should add event if eventType is Goal" name="adminController updateScore: should add event if eventType is Goal" time="0.002">
    </testcase>
    <testcase classname="adminController addMatchEvent: should add a match event successfully" name="adminController addMatchEvent: should add a match event successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Manager Controller" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.372" tests="9">
    <testcase classname="Manager Controller createTeam should create a team successfully" name="Manager Controller createTeam should create a team successfully" time="0.007">
    </testcase>
    <testcase classname="Manager Controller createTeam should handle errors when creating a team" name="Manager Controller createTeam should handle errors when creating a team" time="0.002">
    </testcase>
    <testcase classname="Manager Controller addPlayers should add players successfully" name="Manager Controller addPlayers should add players successfully" time="0.002">
    </testcase>
    <testcase classname="Manager Controller addPlayers should return error if team not found" name="Manager Controller addPlayers should return error if team not found" time="0">
    </testcase>
    <testcase classname="Manager Controller addPlayers should return error if user is not team owner" name="Manager Controller addPlayers should return error if user is not team owner" time="0.001">
    </testcase>
    <testcase classname="Manager Controller addPlayers should handle errors when adding players" name="Manager Controller addPlayers should handle errors when adding players" time="0.001">
    </testcase>
    <testcase classname="Manager Controller myTeam should return team if exists" name="Manager Controller myTeam should return team if exists" time="0.001">
    </testcase>
    <testcase classname="Manager Controller myTeam should return hasTeam: false if no team exists" name="Manager Controller myTeam should return hasTeam: false if no team exists" time="0">
    </testcase>
    <testcase classname="Manager Controller myTeam should handle errors when fetching team" name="Manager Controller myTeam should handle errors when fetching team" time="0">
    </testcase>
  </testsuite>
  <testsuite name="googleAuth controller" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.382" tests="7">
    <testcase classname="googleAuth controller should return 400 if idToken or action is missing" name="googleAuth controller should return 400 if idToken or action is missing" time="0.01">
    </testcase>
    <testcase classname="googleAuth controller should return 400 for invalid action" name="googleAuth controller should return 400 for invalid action" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller signup: should return 409 if user already exists" name="googleAuth controller signup: should return 409 if user already exists" time="0.002">
    </testcase>
    <testcase classname="googleAuth controller signup: should create new user and return 201" name="googleAuth controller signup: should create new user and return 201" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller login: should return 404 if user not found" name="googleAuth controller login: should return 404 if user not found" time="0.002">
    </testcase>
    <testcase classname="googleAuth controller login: should return 200 with user data if user exists" name="googleAuth controller login: should return 200 with user data if user exists" time="0.001">
    </testcase>
    <testcase classname="googleAuth controller should return 401 on token verification error" name="googleAuth controller should return 401 on token verification error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="verifyGoogleToken service" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.388" tests="2">
    <testcase classname="verifyGoogleToken service should return decoded token when verification succeeds" name="verifyGoogleToken service should return decoded token when verification succeeds" time="0.008">
    </testcase>
    <testcase classname="verifyGoogleToken service should throw an error when verification fails" name="verifyGoogleToken service should throw an error when verification fails" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="UserController" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.404" tests="5">
    <testcase classname="UserController getMatches should fetch matches and return 200" name="UserController getMatches should fetch matches and return 200" time="0.011">
    </testcase>
    <testcase classname="UserController getCurrentUser should fetch current user data" name="UserController getCurrentUser should fetch current user data" time="0.002">
    </testcase>
    <testcase classname="UserController getCurrentUser should return 401 if no token" name="UserController getCurrentUser should return 401 if no token" time="0.001">
    </testcase>
    <testcase classname="UserController updateUser should update user profile successfully" name="UserController updateUser should update user profile successfully" time="0.002">
    </testcase>
    <testcase classname="UserController updateUser should return 500 on error" name="UserController updateUser should return 500 on error" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Match Controller" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.408" tests="13">
    <testcase classname="Match Controller startMatch should start a match successfully" name="Match Controller startMatch should start a match successfully" time="0.009">
    </testcase>
    <testcase classname="Match Controller startMatch should handle errors when starting a match" name="Match Controller startMatch should handle errors when starting a match" time="0.022">
    </testcase>
    <testcase classname="Match Controller recordGoal should record a goal successfully" name="Match Controller recordGoal should record a goal successfully" time="0.001">
    </testcase>
    <testcase classname="Match Controller recordGoal should record an away goal correctly" name="Match Controller recordGoal should record an away goal correctly" time="0.001">
    </testcase>
    <testcase classname="Match Controller recordGoal should return error for missing required fields" name="Match Controller recordGoal should return error for missing required fields" time="0.001">
    </testcase>
    <testcase classname="Match Controller recordGoal should handle errors when recording a goal" name="Match Controller recordGoal should handle errors when recording a goal" time="0.001">
    </testcase>
    <testcase classname="Match Controller recordSubstitution should record a substitution successfully" name="Match Controller recordSubstitution should record a substitution successfully" time="0.001">
    </testcase>
    <testcase classname="Match Controller recordSubstitution should return error for missing required fields" name="Match Controller recordSubstitution should return error for missing required fields" time="0">
    </testcase>
    <testcase classname="Match Controller recordSubstitution should handle errors when recording a substitution" name="Match Controller recordSubstitution should handle errors when recording a substitution" time="0.002">
    </testcase>
    <testcase classname="Match Controller recordFoul should record a foul successfully without a card" name="Match Controller recordFoul should record a foul successfully without a card" time="0.002">
    </testcase>
    <testcase classname="Match Controller recordFoul should record a foul successfully with a card" name="Match Controller recordFoul should record a foul successfully with a card" time="0">
    </testcase>
    <testcase classname="Match Controller recordFoul should return error for missing required fields" name="Match Controller recordFoul should return error for missing required fields" time="0">
    </testcase>
    <testcase classname="Match Controller recordFoul should handle errors when recording a foul" name="Match Controller recordFoul should handle errors when recording a foul" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Match Events Controller" errors="0" failures="0" skipped="0" timestamp="2025-09-02T08:18:38" time="1.495" tests="3">
    <testcase classname="Match Events Controller getMatchEventsById should return match events when found" name="Match Events Controller getMatchEventsById should return match events when found" time="0.006">
    </testcase>
    <testcase classname="Match Events Controller getMatchEventsById should return 404 when match events not found" name="Match Events Controller getMatchEventsById should return 404 when match events not found" time="0.001">
    </testcase>
    <testcase classname="Match Events Controller getMatchEventsById should handle errors" name="Match Events Controller getMatchEventsById should handle errors" time="0.01">
    </testcase>
  </testsuite>
</testsuites>